It has the following features:

Agentless – Unlike puppet or chef there is no software or agent managing the nodes.
Python – Built on top of python which is very easy to learn and write scripts and one of the robust programming languages.
SSH – Passwordless network authentication which makes it more secure and easy to set up.
Push architecture – The core concept is to push multiple small codes to the configure and run the action on client nodes.
Setup – This is very easy to set up with a very low learning curve and any open source so that anyone can get hands-on.
Manage Inventory – Machines’ addresses are stored in a simple text format and we can add different sources of truth to pull the list using plugins such as Openstack, Rackspace, etc.


ansible -i ./eclist ECTEST -m ping -o

https://www.golinuxcloud.com/ansible-inventory-files/


---
 - name: "First Ansi"
   hosts: localhost
   become: true
   tasks:
   - name: Installing Git
     apt:
       name: "{{ item }}"
       update_cache: yes
     with_items:
         - "git"
         - "nginx"
   - name: Install python Modules
     command: pip install lxml

ansible  pwbld21nov -m ping -o
ansible myh  -a "sudo apt-get install git -y" -o -b  -K
ansible multi -m shell -a "cat /etc/passwd|grep -i vagrant" -b -K


- name: find out /etc/init.d/splunk file exists or not'
      stat:
        path: /etc/init.d/splunk
      register: splunkresult
      tags:
        - always

    - name: 'Remove splunk from init.d file if splunk already running'
      file:
        path: /etc/init.d/splunk
        state: absent
      when: splunkresult.stat.exists == true
      ignore_errors: yes
      tags:
        - always


- name: check filesystem existence
  shell: if [[ -d  "/folder_name" ]]; then echo "true";  fi
  register: file_exists
  
- name: debug data
  debug: 
    msg: "Folder exists"
  when: file_exists.stdout == "true"



-hosts: all
  gather_facts: no
  tasks:
    - shell: ps -eo pcpu,user,args | sort -r -k1 | head -n5
      register: ps

    - debug: var=ps.stdout_lines


ansible-playbook extract.yml --syntax-check
ansible-playbook extract.yml -b -K


ansible-doc -l 
ansible time -m command -a /usr/bin/uptime


ansible all -m command -a "docker info" -u myuser --become-user root --ask-pass --ask-become-pass



---
 - hosts: all
   gather_facts: true

   tasks:
   - name: check existing license bandwidth
     shell: ascp -A|grep license|awk -F ',' '{print $1}'
     register: license_rate

#   - name: "Exiting the playbook as the servers are already have latest license file"
#     meta: end_play
#     when:
#       - license_rate.stdout == "License max rate=2500 Mbps"

   - name: copy the latest asp.config file
     template: src=aspera.conf_hyd_master.j2 dest=/opt/aspera/etc/aspera.conf owner=nsidprd group=root mode=0664
     when:  ansible_hostname  == "nsid-aspera-hyd-01" or ansible_hostname == "nsid-aspera-hyd-03"
     become: yes

   - name: copy the latest asp.congif file
     template: src=aspera.conf_san_master.j2 dest=/opt/aspera/etc/aspera.conf owner=nsidprd group=root mode=0664
     when:  ansible_hostname  == "nsid-aspera-san-04" or ansible_hostname == "nsid-aspera-san-02"
     become: yes

   - name: "stop aspera services"
     service: name="{{ item }}" state=stopped
     with_items:
      - asperacentral
      - asperanoded
      - asperarund
     when:
      - license_rate.stdout != "License max rate=2500 Mbps"
     become: yes

   - name: unlink existing symlink file
     file: path=/opt/aspera/etc/aspera-license state=absent
     when:
      - license_rate.stdout != "License max rate=2500 Mbps"
     become: yes

   - name: copy the new license file
     copy: src=68727-TransferEndpoint-2500M.aspera-license dest=/opt/aspera/etc/68727-TransferEndpoint-2500M.aspera-license owner=root group=root mode=0644
     when:  ansible_hostname == "nsid-aspera-san-04" or ansible_hostname == "nsid-aspera-san-02"
     become: yes

   - name: copy the new license file
     copy: src=68728-TransferEndpoint-2500M.aspera-license dest=/opt/aspera/etc/68728-TransferEndpoint-2500M.aspera-license owner=root group=root mode=0644
     when:  ansible_hostname  == "nsid-aspera-hyd-01" or ansible_hostname == "nsid-aspera-hyd-03"
     become: yes

   - name: create new symlink file for the latest license file
     file: src=/opt/aspera/etc/68728-TransferEndpoint-2500M.aspera-license dest=/opt/aspera/etc/aspera-license state=link
     when:  ansible_hostname  == "nsid-aspera-hyd-01" or ansible_hostname == "nsid-aspera-hyd-03"
     become: yes

   - name: create new symlink file for the latest license file
     file: src=/opt/aspera/etc/68727-TransferEndpoint-2500M.aspera-license dest=/opt/aspera/etc/aspera-license state=link
     when:  ansible_hostname == "nsid-aspera-san-04" or ansible_hostname == "nsid-aspera-san-02"
     become: yes

   - name: "start aspera services"
     service: name="{{ item }}" state=started
     with_items:
      - asperacentral
      - asperanoded
      - asperarund
     become: yes



---
 - hosts: all
   gather_facts: false
   tasks:
    - name: Download aspera upgrade script as backup option
      get_url:
        url: http://hnallabo-linux.qualcomm.com/aspera/asp_upgrade_carlos.py
        dest: /local/mnt/workspace
        mode: '0755'

    - name: Run asp_upgrade_carlos.py as root on remote hosts
      script: asp_upgrade_carlos.py
      become: yes




- name: Start Zookeeper service
  command: /opt/zookeeper/bin/zkServer.sh start
  tags:
  - start_zookeeper

- name: Validate whether zookeeper service is running or not 
  shell: netstat -plnt | grep $(ps -ef | grep zookeeper.server.quorum.QuorumPeerMain | grep -v "grep" | awk '{print $2}')
  args:
    executable: /bin/bash
  register: zookeeper_port_status
  retries: 5
  delay: 3
  until: zookeeper_port_status.stdout.find('{{zookeeper_port}}') != -1 
  tags:
  - validate_zookeeeper_service




---
  - name: Search String with lineinfile
    hosts: web

    tasks:
      - name: "Searching for a String"
        become: yes
        become_user: root
        register: contentofhttpdconf
        shell: "cat /etc/httpd/conf/httpd.conf"

      - name: "sample task in case the String present in the file"
        when: '"LogLevel debug" in contentofhttpdconf.stdout'
        debug: msg="DEBUG is enabled in Apache Log file"


ansible --version
ansible -m ping all
ansible all -a "whoami"
ansible all -a "uname"
ssh -vvv -i ~/aws/aws_keys/default-ec2.pem ec2-user@3.83.104.44
ls ~/aws/aws_keys/default-ec2.pem
chmod 400 /Users/rangaraokaranam/aws/aws_keys/default-ec2.pem
ansible all -a "uname"
ansible all -a "uname -a"
ansible all -a "pwd"
ansible all -a "python --version"
ansible dev -a "python --version"
ansible qa -a "python --version"
ansible first -a "python --version"
ansible groupofgroups -a "python --version"
ansible devsubset -a "python --version"
ansible --list-host all
ansible --list-host dev
ansible --list-host first
ansible --list-host \!first
ansible --list-host qa:dev
ansible-playbook playbooks/01-ping.yml
ansible-playbook playbooks/02-shell.yml 
ansible-playbook playbooks/03-variables.yml 
ansible-playbook playbooks/03-variables.yml -e variable1=CommandLineValue
ansible-playbook playbooks/04-ansible-facts.yml 
ansible-playbook playbooks/05-install-apache.yml 
ansible-playbook playbooks/06-playbooks.yml 
ansible-playbook playbooks/06-playbooks.yml --list-tasks
ansible-playbook playbooks/06-playbooks.yml --list-hosts
ansible-playbook playbooks/06-playbooks.yml --list-tags
ansible-playbook -l dev playbooks/01-ping.yml
ansible-playbook playbooks/07-conditionals-and-loops.yml 
ansible-inventory --list
ansible-inventory --graph
ansible-playbook playbooks/08-dynamic-inventory-ping.yml 
ansible-playbook playbooks/09-create-ec2.yml 
